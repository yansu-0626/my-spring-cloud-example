<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.2.13.BUILD-SNAPSHOT</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.su.myspringcloud</groupId>
    <artifactId>eureka-service</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>${artifactId}-${version}</name>
    <description>Demo project for Spring Boot</description>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <spring-cloud.version>Hoxton.SR9</spring-cloud.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.1</version>
            <scope>test</scope>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.yaml/snakeyaml -->
<!--        <dependency>-->
<!--            <groupId>org.yaml</groupId>-->
<!--            <artifactId>snakeyaml</artifactId>-->
<!--            <version>1.27</version>-->
<!--        </dependency>-->

        <dependency>
            <groupId>com.su.myspringboot</groupId>
            <artifactId>msc-common-log-starter</artifactId>
            <version>0.0.1-SNAPSHOT</version>
            <scope>compile</scope>
        </dependency>
        <!--Lombok -->
    </dependencies>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <!--配置环境的profile-->
    <profiles>
        <profile>
            <id>8761</id>
            <properties>
                <!--使用${environment}获取值-->
                <!--                <environment>8761</environment>-->
                <profilesActive>8761</profilesActive>
            </properties>
            <activation>
                <activeByDefault>true</activeByDefault><!-- 指定缺省环境 -->
            </activation>
        </profile>
        <profile>
            <id>8762</id>
            <properties>
                <!--                <environment>8762</environment>-->
                <profilesActive>8762</profilesActive>
            </properties>
            <activation>
                <activeByDefault>false</activeByDefault><!-- 指定缺省环境 -->
            </activation>
        </profile>
        <profile>
            <id>8763</id>
            <properties>
                <!--                <environment>8763</environment>-->
                <profilesActive>8763</profilesActive>
            </properties>
            <activation>
                <activeByDefault>false</activeByDefault><!-- 指定缺省环境 -->
            </activation>
        </profile>
    </profiles>

    <build>
        <finalName>${name}-${profilesActive}</finalName>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
                <!-- spring-boot:run 中文乱码解决 -->
                <configuration>
                    <includeSystemScope>true</includeSystemScope>
                    <fork>true</fork>
                    <!--增加jvm参数-->
                    <jvmArguments>-Dfile.encoding=UTF-8</jvmArguments>
                    <executable>true</executable>  <!-- 部署后可以直接./yourapp.jar 启动 -->
                </configuration>
            </plugin>
<!--            <plugin>-->
<!--                <groupId>org.apache.maven.plugins</groupId>-->
<!--                <artifactId>maven-resources-plugin</artifactId>-->
<!--                <configuration>-->
<!--                    <delimiters>-->
<!--                        <delimiter>@</delimiter>-->
<!--                    </delimiters>-->
<!--                    <useDefaultDelimiters>false</useDefaultDelimiters>-->
<!--                </configuration>-->
<!--            </plugin>-->
            <!-- 打包时跳过测试 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
<!--            <plugin>-->
<!--                <groupId>com.spotify</groupId>-->
<!--                <artifactId>docker-maven-plugin</artifactId>-->
<!--                <version>1.2.1</version>-->
<!--                &lt;!&ndash;将插件绑定在某个phase执行&ndash;&gt;-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        <id>build-image</id>-->
<!--                        &lt;!&ndash;将插件绑定在package这个phase上，也就是说，用户只需要执行mvn package,就会自动执行mvn docker:build&ndash;&gt;-->
<!--                        <phase>package</phase>-->
<!--                        <goals>-->
<!--                            <goal>build</goal>-->
<!--                        </goals>-->
<!--                    </execution>-->
<!--                </executions>-->
<!--                <configuration>-->
<!--                    &lt;!&ndash;指定生成的镜像名&ndash;&gt;-->
<!--                    <imageName>clover/${project.artifactId}</imageName>-->
<!--                    &lt;!&ndash;指定标签&ndash;&gt;-->
<!--                    <imageTags>-->
<!--                        <imageTag>latest</imageTag>-->
<!--                    </imageTags>-->
<!--                    &lt;!&ndash;指定Dockerfile 的位置,${project.basedir}:项目的根路径下&ndash;&gt;-->
<!--                    <dockerDirectory>${project.basedir}/src/main/resources/docker</dockerDirectory>-->
<!--                    &lt;!&ndash;指定远程docker api地址&ndash;&gt;-->
<!--                    <dockerHost>http://192.168.223.132:2375</dockerHost>-->
<!--                    <resources>-->
<!--                        <resource>-->
<!--                            &lt;!&ndash;容器中自定义jar包存放的位置，及对应的target目录&ndash;&gt;-->
<!--                            <targetPath>/</targetPath>-->
<!--                            &lt;!&ndash;本地jar包所在路径&ndash;&gt;-->
<!--                            <directory>${project.build.directory}</directory>-->
<!--                            &lt;!&ndash;需要包含本地jar包名称，对应的是Dockerfile中添加的文件名&ndash;&gt;-->
<!--                            <include>${project.build.finalName}.jar</include>-->
<!--                        </resource>-->
<!--                    </resources>-->
<!--                    &lt;!&ndash;以下两行是为了docker push到DockerHub使用的&ndash;&gt;-->
<!--                    &lt;!&ndash;<serverId>docker-hub</serverId>-->
<!--                    <registryUrl>https://index.docker.io/v1</registryUrl>&ndash;&gt;-->
<!--                </configuration>-->
<!--            </plugin>-->
        </plugins>
        <resources>
            <!--排除环境配置文件-->
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <excludes>
                    <exclude>application-*.yml</exclude>
                </excludes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <!-- 打包时包含的文件 -->
                <includes>
                    <include>application-${profilesActive}.yml</include>
                </includes>
            </resource>
        </resources>
    </build>

    <!--	<repositories>-->
    <!--		<repository>-->
    <!--			<id>spring-milestones</id>-->
    <!--			<name>Spring Milestones</name>-->
    <!--			<url>https://repo.spring.io/milestone</url>-->
    <!--		</repository>-->
    <!--		<repository>-->
    <!--			<id>spring-snapshots</id>-->
    <!--			<name>Spring Snapshots</name>-->
    <!--			<url>https://repo.spring.io/snapshot</url>-->
    <!--			<snapshots>-->
    <!--				<enabled>true</enabled>-->
    <!--			</snapshots>-->
    <!--		</repository>-->
    <!--	</repositories>-->
    <!--	<pluginRepositories>-->
    <!--		<pluginRepository>-->
    <!--			<id>spring-milestones</id>-->
    <!--			<name>Spring Milestones</name>-->
    <!--			<url>https://repo.spring.io/milestone</url>-->
    <!--		</pluginRepository>-->
    <!--		<pluginRepository>-->
    <!--			<id>spring-snapshots</id>-->
    <!--			<name>Spring Snapshots</name>-->
    <!--			<url>https://repo.spring.io/snapshot</url>-->
    <!--			<snapshots>-->
    <!--				<enabled>true</enabled>-->
    <!--			</snapshots>-->
    <!--		</pluginRepository>-->
    <!--	</pluginRepositories>-->

</project>
